#include <stdio.h>
#include <stdbool.h>

#define V 4 // Number of vertices

// Function to check if it's safe to assign color c to vertex v
bool isSafe(int v, bool graph[V][V], int color[], int c) {
    for (int i = 0; i < V; i++) {
        if (graph[v][i] && c == color[i])
            return false;
    }
    return true;
}

// Recursive function to assign colors to vertices
bool graphColoringUtil(bool graph[V][V], int m, int color[], int v) {
    // Base case: if all vertices are assigned a color, return true
    if (v == V)
        return true;

    // Try different colors for vertex v
    for (int c = 1; c <= m; c++) {
        // Check if assignment of color c to v is safe
        if (isSafe(v, graph, color, c)) {
            color[v] = c;

            // Recur for the next vertex
            if (graphColoringUtil(graph, m, color, v + 1))
                return true;

            // If assigning color c doesn't lead to a solution, backtrack
            color[v] = 0;
        }
    }

    // If no color can be assigned to this vertex, return false
    return false;
}

// Function to solve graph coloring problem using backtracking
void graphColoring(bool graph[V][V], int m) {
    int color[V];
    for (int i = 0; i < V; i++)
        color[i] = 0;

    if (graphColoringUtil(graph, m, color, 0)) {
        printf("Graph can be colored using at most %d colors. The coloring is:\n", m);
        for (int i = 0; i < V; i++)
            printf("Vertex %d --> Color %d\n", i, color[i]);
    } else {
        printf("Graph cannot be colored using %d colors.\n", m);
    }
}

int main() {
    bool graph[V][V] = {{0, 1, 1, 1},
                        {1, 0, 1, 0},
                        {1, 1, 0, 1},
                        {1, 0, 1, 0}};
    int m = 3; // Number of colors available

    graphColoring(graph, m);

    return 0;
}
