#include <stdio.h>
#include <stdlib.h>

// Structure to represent an item
struct Item {
    int value;
    int weight;
};

// Function to compare items based on value density (value/weight ratio)
int compare(const void *a, const void *b) {
    double ratioA = (double)(((struct Item *)a)->value) / (((struct Item *)a)->weight);
    double ratioB = (double)(((struct Item *)b)->value) / (((struct Item *)b)->weight);
    return (ratioB > ratioA) - (ratioB < ratioA);
}

// Function to solve the Knapsack problem using greedy technique
void knapsack(int capacity, struct Item items[], int n) {
    // Sort items based on value density
    qsort(items, n, sizeof(struct Item), compare);

    int currentWeight = 0;
    double totalValue = 0.0;

    // Loop through sorted items and add them to the knapsack if possible
    for (int i = 0; i < n; i++) {
        if (currentWeight + items[i].weight <= capacity) {
            currentWeight += items[i].weight;
            totalValue += items[i].value;
        } else {
            // If adding the entire item exceeds capacity, add a fraction of it
            int remainingCapacity = capacity - currentWeight;
            totalValue += items[i].value * ((double)remainingCapacity / items[i].weight);
            break;
        }
    }

    printf("Maximum value that can be obtained: %.2lf\n", totalValue);
}

int main() {
    int capacity, n;

    printf("Enter the capacity of the knapsack: ");
    scanf("%d", &capacity);

    printf("Enter the number of items: ");
    scanf("%d", &n);

    struct Item items[n];

    printf("Enter the value and weight of each item:\n");
    for (int i = 0; i < n; i++) {
        printf("Item %d: ", i + 1);
        scanf("%d %d", &items[i].value, &items[i].weight);
    }

    knapsack(capacity, items, n);

    return 0;
}
